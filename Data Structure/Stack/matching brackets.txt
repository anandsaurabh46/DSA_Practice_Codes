// Matching Brackets using stack in C

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>

int comb=0; // to store number of combinations;
char combinations[120][5]; // to store all permutations as max number of permutations from 5 digits is 120;

int length_count(char *str) {
    int i, len=0;
    for(i=0; i<20; i++) {
        if(!str[i]) break;
        len++;
    }
    return len;
}

void swapint(int *x, int *y) 
{ 
    int temp; 
    temp = *x; 
    *x = *y; 
    *y = temp; 
} 

void swap(char *x, char *y) 
{ 
    char temp; 
    temp = *x; 
    *x = *y; 
    *y = temp; 
} 

void selectionSort(int arr[], int n)    //   Selection Sort
{ 
    int i, j, min_idx;
    for (i = 0; i < n-1; i++) 
    { 
        min_idx = i; 
        for (j = i+1; j < n; j++) 
          if (arr[j] < arr[min_idx]) 
            min_idx = j; 
        swapint(&arr[min_idx], &arr[i]); 
    } 
} 

void permute(char *a, int l, int r) {
    int i; 
    if (l == r) {
        combinations[comb][0]=a[0];
        combinations[comb][1]=a[1];
        combinations[comb][2]=a[2];
        combinations[comb][3]=a[3];
        combinations[comb][4]=a[4];
        comb++;
    }
else { 
    for (i = l; i <= r; i++) { 
            swap((a+l), (a+i)); 
            permute(a, l+1, r); 
            swap((a+l), (a+i)); //backtrack 
        } 
    } 
} 

int main() {
    
printf("\n\n---------------------- SUBTASK 2 ---------------------------------\n\n");
    int i;
    char name[20]="";
    int comb = 0; // to store total number of combinations;
    printf("Enter Your Name : ");
    scanf("%[^\n]", name);

    char name1[20];  // to store alphabets of name without space;
    // initialize name1 will null characters to prevent garbage values;
    for(i=0; i<20; i++) name1[i]=(char)(0); 

    int index = 0;
    for(i=0; i<strlen(name); i++) {
        if((name[i]<=122 && name[i]>=97) || (name[i]>=65 && name[i]<=90))
            name1[index++] = name[i];   // Storing only the Alphabets in new set;
    }
    printf("Characters in name : %s\n", name1);
    
    // printing number of alphabets in name
    int num = length_count(name1);
    printf("%d\n", num);
    
    // to generate random strings right rotate characters by random index. 
    char names[20];
    for(i=0; i<20; i++) names[i]=(char)(0);
    
    int count = 5; // generate 5 random strings.
    
    FILE *fptr;
    fptr = fopen("random_names.csv","w");
    if(fptr == NULL) printf("Error!");
    
    int r;
    srand(time(0));
    while(count--) {
        // rotate elements and store in new set:
        r = rand()%num;
        for(i=0; i<num; i+=2) names[(i+4*r)%num] = name1[i]; // rotate even elements; 
        for(i=1; i<num; i+=2) names[(i+2*r)%num] = name1[i]; // rotate odd elements;
        fprintf(fptr,"%s\n",names);
    }
    fprintf(fptr, "##");
    fclose(fptr);
    printf("Output written to random_names.csv");
    

printf("\n\n---------------------- SUBTASK 1 ---------------------------------\n\n");
    
    printf("printing name one alphabet in each line\n");
    printf("s\na\nu\nr\na\nb\nh\n\na\na\nn\na\nn\nd\n");
    
    printf("printing roll no seperated by '*'\n");
    printf("2*0*5*1*2*0*0*9*2\n");
    
    printf("printing DOB in dd/mm/yyyy format\n");
    printf("04/06/1999\n");
    
    int age;
    printf("Enter Your age : ");
    scanf("%d", &age);
    int birth_year = 2020-age;
    printf("your 50th birth year is %d\n", birth_year+50);
    printf("printing 100th, 150th, 200th, 250th year");
    printf("%d, %d, %d, %d\n", birth_year+100, birth_year+150, birth_year+200, birth_year+250);

printf("\n\n---------------------- SUBTASK 3 ---------------------------------\n\n");
    
    int j=0;
    char numbers[5];
    printf("Enter 5 digits : ");
    scanf("%s", numbers);
    
    
    // using backtracking to print all permutations;
    permute(numbers, 0, 4);
    printf("All permutations are : \n");
    for(i=0; i<120; i++) {
        for(j=0; j<5; j++) {
            printf("%c", combinations[i][j]);
            if(j==4) printf(" %s", combinations[i][j]%2==0 ? "Even" : "Odd");
        }
        printf("\n");
    }
    printf("Number of possible permutations is %d\n\n", 120);
    
    int arr[5];
    for(i=0; i<5; i++) arr[i] = numbers[i]-'0';
    selectionSort(arr, 5);
    printf("List in ascending order : \n");
    for(i=0; i<5; i++) printf("%d ", arr[i]);
    
    return 0;
}
